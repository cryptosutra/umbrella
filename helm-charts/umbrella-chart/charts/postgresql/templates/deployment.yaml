apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "postgresql.fullname" . }}
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "postgresql.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postgresql.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.podSecurityContext.runAsGroup }}
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
        runAsNonRoot: {{ .Values.podSecurityContext.runAsNonRoot }}
      {{- end }}
      containers:
        - name: postgresql
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
          {{- end }}
          env:
            - name: POSTGRESQL_USER
              value: {{ .Values.auth.username | quote }}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretRef:
                  name: {{ include "postgresql.fullname" . }}-secret
                  key: user-password
            - name: POSTGRESQL_DATABASE
              value: {{ .Values.auth.database | quote }}
            {{- if .Values.auth.enablePostgresUser }}
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretRef:
                  name: {{ include "postgresql.fullname" . }}-secret
                  key: postgres-password
            {{- end }}
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.auth.username | quote }} -d {{ .Values.auth.database | quote }} -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.auth.username | quote }} -d {{ .Values.auth.database | quote }} -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            {{- toYaml .Values.primary.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/pgsql/data
      volumes:
        - name: data
          {{- if .Values.primary.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "postgresql.fullname" . }}-pvc
          {{- else }}
          emptyDir: {}
          {{- end }}